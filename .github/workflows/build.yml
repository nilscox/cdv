name: build

on: [push]

env:
  API_IMAGE: nilscox/zetecom-api
  APP_IMAGE: nilscox/zetecom-app

jobs:
  # build

  api:
    name: build api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: nilscox/zetecom-api
          image_tag: ${{ github.sha }}
          context: ./api

  app:
    name: build app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: nilscox/zetecom-app
          image_tag: ${{ github.sha }}
          context: ./app

  styleguidist:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2.3.1
      - run: yarn
      - run: yarn build:styleguidist
      - uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: app/styleguide

  extension:
    name: build extension
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v1
      - run: if [ '${{ github.ref }}' = 'refs/heads/master' ]; then echo "environment=production" >> $GITHUB_ENV; fi
      - run: if [ '${{ github.ref }}' = 'refs/heads/dev' ]; then echo "environment=staging" >> $GITHUB_ENV; fi
      - run: echo "extension_version=$(node -e $'console.log(require(\'./extension/package.json\').version)')" >> $GITHUB_ENV
      - run: yarn zip "$environment"
        working-directory: ./extension
      - run: echo "extension_zip=zetecom-extension-${{ env.environment }}-${{ env.extension_version }}" >> $GITHUB_ENV
      - run: mkdir -p artifacts/build && cd artifacts/build && unzip "../../extension/$extension_zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.extension_zip }}
          path: artifacts/build
      - run: echo "extension_sources_zip=zetecom-extension-${{ env.environment }}-sources-${{ env.extension_version }}" >> $GITHUB_ENV
      - run: mkdir -p artifacts/sources && cd artifacts/sources && unzip "../../extension/$extension_sources_zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.extension_sources_zip }}
          path: artifacts/sources

  website:
    name: build website
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: nilscox/zetecom-website
          image_tag: ${{ github.sha }}
          context: ./website

  # code quality

  code-quality:
    name: code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: yarn
        working-directory: ./api
      - run: yarn lint
        working-directory: ./api
      - run: yarn test:unit
        working-directory: ./api
      - run: yarn
        working-directory: ./app
      - run: yarn lint
        working-directory: ./app
      - run: yarn test
        working-directory: ./app
      - run: yarn
        working-directory: ./extension
      - run: yarn test
        working-directory: ./extension

  # e2e

  api-e2e:
    name: api end-to-end tests
    runs-on: ubuntu-latest
    needs: [api]
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "11.5"
          postgresql db: "test"
          postgresql user: "root"
          postgresql password: "root"
      - uses: actions/checkout@v1
      - run: yarn
      - run: yarn test:intg
      - run: yarn test:e2e

  e2e:
    name: end-to-end tests
    runs-on: ubuntu-latest
    needs: [api, app, website]
    defaults:
      run:
        working-directory: ./e2e
    steps:
      - uses: actions/checkout@v1
      - run: mkdir -p ./artifacts/screenshots
      - run: yarn
      - run: yarn docker-compose:ci up -d
        env:
          GIT_SHA: ${{ github.sha }}
      - run: docker logs -f zc-api > ./artifacts/api.log &
      - run: yarn build
      - run: yarn serve -l 7357 build &
      - run: yarn wait-on -t $((30 * 1000)) http://localhost:3000/api/healthcheck
      - run: yarn test:headless --screenshots ./artifacts/screenshots
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: e2e-artifacts
          path: e2e/artifacts
      # - uses: codecov/codecov-action@v1
      #   if: success()

  # publish

  publish-api:
    name: publish api docker image
    runs-on: ubuntu-latest
    needs: [api-e2e, e2e, code-quality]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - run: ref=${{ github.ref }}; echo "tag=${ref#refs/heads/}" >> $GITHUB_ENV
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $API_IMAGE:${{ github.sha }}
      - run: docker tag $API_IMAGE:${{ github.sha }} "$API_IMAGE:$tag"
      - run: docker push "$API_IMAGE:$tag"

  publish-app:
    name: publish app docker image
    runs-on: ubuntu-latest
    needs: [e2e, code-quality]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - run: ref=${{ github.ref }}; echo "tag=${ref#refs/heads/}" >> $GITHUB_ENV
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $APP_IMAGE:${{ github.sha }}
      - run: docker tag $APP_IMAGE:${{ github.sha }} "$APP_IMAGE:$tag"
      - run: docker push "$APP_IMAGE:$tag"
