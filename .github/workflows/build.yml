name: build

on: [push]

env:
  API_IMAGE: nilscox/reagir-information-api
  APP_IMAGE: nilscox/reagir-information-app

jobs:

  api:
    name: build api
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        image_name: nilscox/reagir-information-api
        image_tag: ${{ github.sha }}
        context: ./api

  app:
    name: build app
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        image_name: nilscox/reagir-information-app
        image_tag: ${{ github.sha }}
        context: ./app

  extension:
    name: build extension staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
    - uses: actions/checkout@v1
    - run: yarn && ../scripts/build-extension.ci.sh staging
      working-directory: ./extension
      env:
        APP_URL: ${{ secrets.APP_URL_STAGING }}
    - uses: actions/upload-artifact@v2
      with:
        name: extension
        path: extension/*.zip

  website:
    name: build website
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: docker build .
      working-directory: ./website

  api-e2e:
    name: api end-to-end tests
    runs-on: ubuntu-latest
    needs: [api]
    steps:
    - uses: harmon758/postgresql-action@v1
      with:
        postgresql version: '11.5'
        postgresql db: 'test'
        postgresql user: 'root'
        postgresql password: 'root'
    - run: docker run --network=host nilscox/reagir-information-api:${{ github.sha }} yarn test:intg
    - run: docker run --network=host nilscox/reagir-information-api:${{ github.sha }} yarn test:e2e

  e2e:
    name: end-to-end tests
    runs-on: ubuntu-latest
    needs: [api, app, website]
    steps:
    - uses: actions/checkout@v1
    - run: docker-compose -f ../docker-compose.yml -f docker-compose.ci.yml up --abort-on-container-exit
      working-directory: ./e2e
      env:
        GIT_SHA: ${{ github.sha }}
    - uses: codecov/codecov-action@v1
      if: success()
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-outputs
        path: e2e/artifacts

  publish-api-staging:
    name: publish api docker image staging
    runs-on: ubuntu-latest
    needs: [api, api-e2e, e2e]
    if: github.ref == 'refs/heads/dev'
    steps:
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $API_IMAGE:${{ github.sha }}
      - run: docker tag $API_IMAGE:${{ github.sha }} $API_IMAGE:dev
      - run: docker push $API_IMAGE:dev

  publish-api-production:
    name: publish api docker image production
    runs-on: ubuntu-latest
    needs: [api, api-e2e, e2e]
    if: github.ref == 'refs/heads/master'
    steps:
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $API_IMAGE:${{ github.sha }}
      - run: docker tag $API_IMAGE:${{ github.sha }} $API_IMAGE:master
      - run: docker push $API_IMAGE:master

  publish-app-staging:
    name: publish app docker image staging
    runs-on: ubuntu-latest
    needs: [app, e2e]
    if: github.ref == 'refs/heads/dev'
    steps:
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $APP_IMAGE:${{ github.sha }}
      - run: docker tag $APP_IMAGE:${{ github.sha }} $APP_IMAGE:dev
      - run: docker push $APP_IMAGE:dev

  publish-app-production:
    name: publish app docker image production
    runs-on: ubuntu-latest
    needs: [app, e2e]
    if: github.ref == 'refs/heads/master'
    steps:
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull $APP_IMAGE:${{ github.sha }}
      - run: docker tag $APP_IMAGE:${{ github.sha }} $APP_IMAGE:master
      - run: docker push $APP_IMAGE:master
